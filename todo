
1. how to use javascript.node snippets

2. setup local vimrc for setting filetype
    eg: filetype jinja *.html

setup home/work/all plugins 
    source plugins.vim (all)
    source $PLUGINS (csv)
    settings for each plugin could be added in these files

profile leaderf 

setup eslint on arch
{
    "env": {
        "browser": true,
        "jquery": true,
        "es6": true,
        "node": true
    },
    "extends": ["eslint:recommended","plugin:react/recommended"],
    "parserOptions": {
	"sourceType": "module",
        "ecmaVersion": 8,
        "ecmaFeatures": {
            "jsx": true,
	    "experimentalObjectRestSpread": true
        }
    },
    "rules": {
        "array-bracket-spacing": [
            "error",
            "never"
        ],
        "block-scoped-var": [
            "error"
        ],
        "camelcase": [
            "warn",
            {
                "properties": "always"
            }
        ],
        "comma-dangle": [
            "error",
            "always-multiline"
        ],
        "comma-style": [
            "error",
            "last"
        ],
        "computed-property-spacing": [
            "error",
            "never"
        ],
        "curly": [
            "error",
            "all"
        ],
        "default-case": [
            "error"
        ],
        "eqeqeq": [
            "error",
            "smart"
        ],        
        "linebreak-style": [
            "error",
            "unix"
        ],
        "no-console": [
            "warn",
            {
                "allow": ["warn", "error"]
            }
        ],
        "no-else-return": [
            "error"
        ],
        "no-empty-function": [
            "error"
        ],
        "no-fallthrough": [
            "warn"
        ],
        "no-lonely-if": [
            "error"
        ],
        "no-use-before-define": [
            "error"
        ],
        "no-useless-return": [
            "error"
        ],
        "quotes": [
            "error",
            "single"
        ],
        "radix": [
            "error",
            "always"
        ],
        "semi": [
            "error",
            "always"
        ],
        "spaced-comment": [
            "error",
            "always",
            {
                "block": {
                    "balanced": true
                }
            }
        ],
        "vars-on-top": [
            "warn"
        ]
    }
}

shortcuts for copy to clipboard  (eg \Yi" ) with motion

operator for javascript 'f' => function

using ack
    mapping from 'project root' (no cr)
    mapping from current search  (no cr)
    mapping from current filetype (eg --py) (no cr)
    
lightline - 
    show ic / etc ?

tab mappings
    left tab or right tab



1. surround lines with try/catch (except) => Using VISUAL snippets

2. shortcut for surround argument with function and parethesis => using snippet pa<TAB>
wrapper to take constructor params and set this/self.  - not sure which plugin

big:
function to choose random colorscheme, and function to delete it


learn :help pattern-overview

Plugins to learn:
    switch
    fugitive
    vim-signature
    vim-speeddating
    vim-localrc     - for work addons
    targets


Possible Plugins to install:
    vim-bumblebee (https://github.com/PeterRincker/vim-bumblebee)
        fuzzy buffer switching

    vim-vinegar (https://www.youtube.com/watch?v=OgQW07saWb0)

    https://github.com/tpope/vim-projectionist
        projections (https://www.youtube.com/watch?v=3jDafvUESbs

    https://github.com/AndrewRadev/sideways.vim
        Move function arguments left or right

    https://github.com/dbakker/vim-projectroot
        Find out which project a file belongs to, easy to use in scripts/mappings

    https://github.com/kana/vim-textobj-indent OR https://github.com/michaeljsmith/vim-indent-object
        Text objects for indented blocks

    https://github.com/christoomey/vim-sort-motion
        Sort by lines, visual, indentation (requires vim-textobj-indent)

    https://github.com/vimwiki/vimwiki
        Personal Wiki for Vim

    https://github.com/coderifous/textobj-word-column.vim
        Adds text-objects for word-based columns

    Plugin for numbering

    Plugin for working with python





todo:
    mapping for inserting gmail / work email

    python:  
        convert between lists of value=pair to dictionary instances

    command line args for filtering NERDTree:
        vim -X *.xml => only show *.xml in NERDTree


create snippets:
    python 
    
        start class:
            class XXX(Y):
                def __init__(self, ZZZ):
                    fin

        borg pattern

        argparse


    bash 
        script with args


--------------------------------------------------------------------------------


fugituve bindings:   EG: 
" fugitive git bindings
nnoremap <space>ga :Git add %:p<CR><CR>
nnoremap <space>gs :Gstatus<CR>
nnoremap <space>gc :Gcommit -v -q<CR>
nnoremap <space>gt :Gcommit -v -q %:p<CR>
nnoremap <space>gd :Gdiff<CR>
nnoremap <space>ge :Gedit<CR>
nnoremap <space>gr :Gread<CR>
nnoremap <space>gw :Gwrite<CR><CR>
nnoremap <space>gl :silent! Glog<CR>:bot copen<CR>
nnoremap <space>gp :Ggrep<Space>
nnoremap <space>gm :Gmove<Space>
nnoremap <space>gb :Git branch<Space>
nnoremap <space>go :Git checkout<Space>
nnoremap <space>gps :Dispatch! git push<CR>
nnoremap <space>gpl :Dispatch! git pull<CR>



tasks:

--------------------------------------------------------------------------------
2.  idea for loading Domain specific VIMRC files
     use ENV vars and separate vimrcs:
    eg:
        enable python specific development  PYVIM=~/.vim/rcs/python_vimrc 
        enable work specific stuff  WORKVIM=~/.vim/rcs/work_vimrc    [ eg. coffeescript ]


consider using localleader for commands specific to a buffer (usewith with autocmds?)
Non greedy quantifiers
using cdpath
cindenting
folding 

mechanism for auto loading of tags 
	if tags in current ( project ) directory load tags 
  if .autoctag in directory regen ctags

function to change font size

useful:
--------------------------------------------------------------------------------
open header =>   :e %:r.h

plugins:
--------------------------------------------------------------------------------
  
renumber: http://www.vim.org/scripts/script.php?script_id=189 OR VisIncr: https://github.com/vim-scripts/VisIncr
textobj-word-column: https://github.com/coderifous/textobj-word-column.vim



--------------------------------------------------------------------------------
enable/disable autoread/autowrite modes: 
eg:
	

" autoread and autowrite
augroup save
  au!
  au FocusLost * wall
augroup END
set nohidden
set nobackup
set noswapfile
set nowritebackup
set autoread
set autowrite
set autowriteall

" see help persistent-undo
set undodir=~/.vim/undo
set undofile

